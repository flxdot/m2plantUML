@startuml

set namespaceSeparator none

abstract class handle {
   -- Events --
   ObjectBeingDestroyed
}

class uint32 {
}

package matdoc {

   package matdoc.enums {
   
      enum matdoc.enums.AccessLevel {
         -- Enumeration Values --
         Public
         Protected
         Private
      }
   
   }

   package matdoc.meta {
   
      class matdoc.meta.Class {
         -- Properties --
         .. Constant ..
         {field} {static} + IDENT < matdoc.uml.super.Base
         .. Protected ..
         {field} # Configuration < matdoc.super.WithMetaObjProps
         {field} # Parent < matdoc.super.WithMetaObjProps
         {field} # UmlRoot < matdoc.super.WithMetaObjProps
         .. SetAccess = Protected ..
         {field} + Abstract
         {field} + Alias < matdoc.super.WithAlias
         {field} + ConstructOnLoad
         {field} + Constructor
         {field} + ContainingPackage
         {field} + Description
         {field} + DetailedDescription
         {field} + EnumerationMemberList
         {field} + EventList
         {field} + HandleCompatible
         {field} + hasAbstractMembers
         {field} + Hidden
         {field} + InferiorClasses
         {field} + InheritationRelations
         {field} + isBuiltIn
         {field} + metaObj < matdoc.meta.super.Base
         {field} + MethodList
         {field} + MethodListFlattened
         {field} + Name
         {field} + NameRaw < matdoc.super.WithNameRaw
         {field} + PropertyList
         {field} + PropertyListFlattened
         {field} + Sealed
         {field} + SortedMethodList
         {field} + SortedPropertyList
         {field} + SuperclassList
         {field} + SuperclassListFlattened
         -- Events --
         ObjectBeingDestroyed < handle
      }
   
      package matdoc.meta.super {
      
         abstract class matdoc.meta.super.Base {
            -- Properties --
            .. Abstract  SetAccess = Protected ..
            {field} {abstract} + Name
            .. Protected ..
            {field} # Configuration < matdoc.super.WithMetaObjProps
            {field} # Parent < matdoc.super.WithMetaObjProps
            {field} # UmlRoot < matdoc.super.WithMetaObjProps
            .. SetAccess = Protected ..
            {field} + metaObj
            -- Events --
            ObjectBeingDestroyed < handle
         }
      
         abstract class matdoc.meta.super.Container {
            -- Properties --
            .. Abstract  SetAccess = Protected ..
            {field} {abstract} + Name < matdoc.meta.super.Base
            .. Protected ..
            {field} # Configuration < matdoc.super.WithMetaObjProps
            {field} # Parent < matdoc.super.WithMetaObjProps
            {field} # UmlRoot < matdoc.super.WithMetaObjProps
            .. SetAccess = Protected ..
            {field} + Alias < matdoc.super.WithAlias
            {field} + metaObj < matdoc.meta.super.Base
            {field} + NameRaw < matdoc.super.WithNameRaw
            -- Events --
            ObjectBeingDestroyed < handle
         }
      
      }
   
   }

   package matdoc.super {
   
      abstract class matdoc.super.WithAlias {
         -- Properties --
         .. Abstract  SetAccess = Protected ..
         {field} {abstract} + Name
         {field} {abstract} + NameRaw
         .. SetAccess = Protected ..
         {field} + Alias
         -- Events --
         ObjectBeingDestroyed < handle
      }
   
      class matdoc.super.WithMetaObjProps {
         -- Properties --
         .. Protected ..
         {field} # Configuration
         {field} # Parent
         {field} # UmlRoot
         -- Events --
         ObjectBeingDestroyed < handle
      }
   
      abstract class matdoc.super.WithNameRaw {
         -- Properties --
         .. Abstract  SetAccess = Protected ..
         {field} {abstract} + Name
         .. SetAccess = Protected ..
         {field} + NameRaw
         -- Events --
         ObjectBeingDestroyed < handle
      }
   
   }

   package matdoc.uml {
   
      class matdoc.uml.Class {
         -- Properties --
         .. Constant ..
         {field} {static} + IDENT < matdoc.uml.super.Base
         .. Protected ..
         {field} # Configuration < matdoc.super.WithMetaObjProps
         {field} # Parent < matdoc.super.WithMetaObjProps
         {field} # UmlRoot < matdoc.super.WithMetaObjProps
         -- Events --
         ObjectBeingDestroyed < handle
      }
   
      package matdoc.uml.super {
      
         abstract class matdoc.uml.super.Base {
            -- Properties --
            .. Constant ..
            {field} {static} + IDENT
            .. Protected ..
            {field} # Configuration < matdoc.super.WithMetaObjProps
            {field} # Parent < matdoc.super.WithMetaObjProps
            {field} # UmlRoot < matdoc.super.WithMetaObjProps
            -- Events --
            ObjectBeingDestroyed < handle
         }
      
         abstract class matdoc.uml.super.WithPlantUML {
            -- Events --
            ObjectBeingDestroyed < handle
         }
      
      }
   
   }

}


matdoc.enums.AccessLevel --|> uint32
matdoc.meta.Class ..|> matdoc.meta.super.Container
matdoc.meta.Class --|> matdoc.uml.Class
matdoc.meta.super.Base --|> matdoc.super.WithMetaObjProps
matdoc.meta.super.Container ..|> matdoc.meta.super.Base
matdoc.meta.super.Container ..|> matdoc.super.WithNameRaw
matdoc.meta.super.Container ..|> matdoc.super.WithAlias
matdoc.super.WithAlias ..|> handle
matdoc.super.WithMetaObjProps ..|> handle
matdoc.super.WithNameRaw ..|> handle
matdoc.uml.Class ..|> matdoc.uml.super.Base
matdoc.uml.super.Base --|> matdoc.super.WithMetaObjProps
matdoc.uml.super.Base ..|> matdoc.uml.super.WithPlantUML
matdoc.uml.super.WithPlantUML ..|> handle

@enduml